{"version":3,"sources":["store/currentTodo.ts","store/loading.ts","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","rootReducer","combineReducers","currentTodo","action","loading","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useSelector","TodoList","todos","dispatch","useDispatch","className","map","id","completed","classNames","title","onClick","todoActions","TodoFilter","visibleTodosSelect","visibleTodosInput","useState","query","setQuery","onChange","event","value","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","users","setUsers","isLoading","state","useEffect","loadingActions","usersFromServer","finally","currentUser","find","user","userId","href","name","App","setTodos","currentTodos","setCurrentTodos","todosFromServer","selectOption","filteredTodos","filter","lowerQuery","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d127e35.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todo/set',\n  payload: Todo,\n};\n\ntype DeleteTodoAction = {\n  type: 'todo/delete',\n};\n\nexport type TodoAction = SetTodoAction | DeleteTodoAction;\n\nconst initialState = null;\n\nexport const todoReducer = (todo = initialState, action: TodoAction) => {\n  switch (action.type) {\n    case 'todo/set':\n      return action.payload;\n\n    case 'todo/delete':\n      return null;\n\n    default:\n      return todo;\n  }\n};\n\nexport const actions = {\n  setTodo: ((todo: Todo): SetTodoAction => ({\n    type: 'todo/set',\n    payload: todo,\n  })),\n  deleteTodo: (): DeleteTodoAction => ({ type: 'todo/delete' }),\n};\n","type StartLoadingAction = {\n  type: 'loading/start';\n};\n\ntype FinishLoadingAction = {\n  type: 'loading/finish';\n};\n\nexport type LoadingAction = StartLoadingAction | FinishLoadingAction;\n\nexport const loadingReducer = (loading = false, action: LoadingAction) => {\n  switch (action.type) {\n    case 'loading/start':\n      return true;\n\n    case 'loading/finish':\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({ type: 'loading/start' }),\n  finishLoading: (): FinishLoadingAction => ({ type: 'loading/finish' }),\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { todoReducer } from './currentTodo';\nimport { loadingReducer } from './loading';\n\nconst rootReducer = combineReducers({\n  currentTodo: todoReducer,\n  loading: loadingReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions as todoActions } from '../../store/currentTodo';\n\ntype Props = {\n  todos: Todo[] | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos?.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered \">\n              {todo.completed && (\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  dispatch(todoActions.setTodo(todo));\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useState } from 'react';\n\ntype Props = {\n  visibleTodosSelect:(selectOption:string) => void,\n  visibleTodosInput:(query:string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  visibleTodosSelect,\n  visibleTodosInput,\n}) => {\n  const [query, setQuery] = useState('');\n\n  const handleChangeSelect = (event: { target: { value: string; }; }) => {\n    const { value } = event.target;\n\n    visibleTodosSelect(value);\n  };\n\n  const handleChangeInput = (event: { target: { value: string; }; }) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    visibleTodosInput(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChangeSelect}\n          >\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"active\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setQuery('');\n                visibleTodosInput('');\n              }}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\nexport const getUsers = () => get<User[]>('/users');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUsers } from '../../api';\nimport { useAppSelector } from '../../store';\nimport { actions as loadingActions } from '../../store/loading';\nimport { actions as todoActions } from '../../store/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const dispatch = useDispatch();\n  const isLoading = useAppSelector(state => state.loading);\n\n  useEffect(() => {\n    dispatch(loadingActions.startLoading());\n\n    getUsers()\n      .then(usersFromServer => {\n        setUsers([...usersFromServer]);\n      })\n      .finally(() => dispatch(\n        loadingActions.finishLoading(),\n      ));\n  }, []);\n\n  const currentUser = users?.find(user => user.id === todo.userId);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(todoActions.deleteTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className=\"has-text-danger\">Planned</strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {currentUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './store';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n  const [currentTodos, setCurrentTodos] = useState<Todo[] | null>(null);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => todosFromServer\n        .map(todo => ({\n          ...todo,\n          user: getUser(todo.userId),\n        })))\n      .then(todosFromServer => {\n        setTodos([...todosFromServer]);\n        setCurrentTodos([...todosFromServer]);\n      });\n  }, []);\n\n  const visibleTodosInput = (query:string) => {\n    const lowerQuery = query.toLowerCase();\n\n    const filteredTodos = todos?.filter(todo => (\n      todo.title.toLowerCase().includes(lowerQuery)\n    ));\n\n    if (filteredTodos) {\n      setCurrentTodos(filteredTodos);\n    }\n  };\n\n  const visibleTodosSelect = (selectOption:string) => {\n    let filteredTodos;\n\n    switch (selectOption) {\n      case 'active':\n        filteredTodos = todos?.filter(todo => todo.completed === false);\n\n        if (filteredTodos) {\n          setCurrentTodos(filteredTodos);\n        }\n\n        break;\n\n      case 'completed':\n        filteredTodos = todos?.filter(todo => todo.completed === true);\n\n        if (filteredTodos) {\n          setCurrentTodos(filteredTodos);\n        }\n\n        break;\n\n      case 'all':\n        setCurrentTodos(todos);\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter visibleTodosSelect={visibleTodosSelect} visibleTodosInput={visibleTodosInput} />\n            </div>\n\n            <div className=\"block\">\n              {todos ? (\n                <TodoList todos={currentTodos} />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal todo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}